#!/usr/bin/env bash

## Copyright (C) 2020-2023 Aditya Shakya <adi1090x@gmail.com>
## Edited for Garuda Linux by yurihikari
## Modified by Panther-14 (Github)

# Import Current Theme
DIR="$HOME/.config/hypr"
RASI="$DIR/assets/themes/applets.rasi"

# Theme Elements
status="`mpc status`"
if [[ -z "$status" ]]; then
	prompt='Offline'
	mesg="MPD is Offline"
else
	prompt="`mpc -f "%title%" current`"
	mesg="`mpc -f "%file%" current`"
fi

# Options
layout=`cat ${RASI} | grep 'USE_ICON' | cut -d'=' -f2`
if [[ "$layout" == 'NO' ]]; then
	if [[ ${status} == *"[playing]"* ]]; then
		option_1=" Pause"
	else
		option_1=" Play"
	fi
	option_2=" Stop"
	option_3=" Previous"
	option_4=" Next"
	option_5=" Repeat"
	option_6=" Random"
else
	if [[ ${status} == *"[playing]"* ]]; then
		option_1=""
	else
		option_1=""
	fi
	option_2=""
	option_3=""
	option_4=""
	option_5=""
	option_6=""
fi

# Toggle Actions
active=''
urgent=''
# Repeat
if [[ ${status} == *"repeat: on"* ]]; then
    active="-a 4"
elif [[ ${status} == *"repeat: off"* ]]; then
    urgent="-u 4"
else
    option_5=" Parsing Error"
fi
# Random
if [[ ${status} == *"random: on"* ]]; then
    [ -n "$active" ] && active+=",5" || active="-a 5"
elif [[ ${status} == *"random: off"* ]]; then
    [ -n "$urgent" ] && urgent+=",5" || urgent="-u 5"
else
    option_6=" Parsing Error"
fi

# Rofi CMD
rofi_cmd() {
	rofi -dmenu \
		-p "$prompt" \
		-mesg "$mesg" \
		${active} ${urgent} \
		-markup-rows \
		-theme ${RASI}
}

# Pass variables to rofi dmenu
run_rofi() {
	echo -e "$option_1\n$option_2\n$option_3\n$option_4\n$option_5\n$option_6" | rofi_cmd
}

# Execute Command
iDIR="$HOME/.config/hypr/assets/icons"
notify_song="notify-send -h string:x-canonical-private-synchronous:sys-notify-song -u low -i ${iDIR}/music.png --app-name="Music" "Music""
run_cmd() {
	# Actions
	chosen="$(run_rofi)"
	case ${chosen} in
		$option_1)
			mpc -q toggle && ${notify_song} "`mpc -f "%title%\n%artist%" current`"
		;;
		$option_2)
			mpc -q stop && ${notify_song} "Stopped"
		;;
		$option_3)
			mpc -q pause && mpc -q prev && mpc -q play
			${notify_song} "`mpc -f "%title%\n%artist%" current`"
		;;
		$option_4)
			mpc -q pause && mpc -q next && mpc -q play
			${notify_song} "`mpc -f "%title%\n%artist%" current`"
		;;
		$option_5)
			mpc -q repeat && ${notify_song} "Repeat"
		;;
		$option_6)
			mpc -q random && ${notify_song} "Random"
		;;
	esac	
}

case $1 in 
	--next)
		mpc -q next && ${notify_song} "`mpc -f "%title%\n%artist%" current`"
	;;
	--previous)
		mpc -q prev && ${notify_song} "`mpc -f "%title%\n%artist%" current`"
	;;
	--toggle)
		mpc -q toggle && ${notify_song} "`mpc -f "%title%\n%artist%" current`"
	;;
	--play)
		mpc -q play && ${notify_song} "`mpc -f "%title%\n%artist%" current`"
	;;
	--pause)
		mpc -q pause && ${notify_song} "`mpc -f "%title%\n%artist%" current`"
	;;
	--stop)
		mpc -q stop && ${notify_song} "Stopped"
	;;
	--repeat)
		mpc -q repeat && ${notify_song} "Repeat"
	;;
	--random)
		mpc -q random && ${notify_song} "Random"
	;;
	--rofi|*)
		run_cmd
	;;
esac &>/dev/null